diff --git a/lib/tailcall/accounts/invoice_settings/invoice_settings.ex b/lib/tailcall/accounts/invoice_settings/invoice_settings.ex
index c1df43f..28dcb70 100644
--- a/lib/tailcall/accounts/invoice_settings/invoice_settings.ex
+++ b/lib/tailcall/accounts/invoice_settings/invoice_settings.ex
@@ -1,7 +1,7 @@
 defmodule Tailcall.Accounts.InvoiceSettings do
   use Ecto.Schema
 
-  import Ecto.Changeset, only: [cast: 3]
+  import Ecto.Changeset, only: [cast: 3, validate_inclusion: 3]
 
   @type t :: %__MODULE__{}
 
@@ -27,5 +27,6 @@ defmodule Tailcall.Accounts.InvoiceSettings do
       :next_invoice_sequence_testmode,
       :numbering_scheme
     ])
+    |> validate_inclusion(:numbering_scheme, Map.values(numbering_scheme()))
   end
 end
diff --git a/lib/tailcall/billing/invoices.ex b/lib/tailcall/billing/invoices.ex
index 590b722..b13e74c 100644
--- a/lib/tailcall/billing/invoices.ex
+++ b/lib/tailcall/billing/invoices.ex
@@ -10,8 +10,9 @@ defmodule Tailcall.Billing.Invoices do
 
   alias Tailcall.Accounts
   alias Tailcall.Core.Customers
+  alias Tailcall.Billing.Subscriptions
   alias Tailcall.Billing.Invoices.{Invoice, InvoiceQueryable}
-  alias Tailcall.Billing.Invoices.Workers.AutoAdvanceWorker
+  alias Tailcall.Billing.Invoices.Workers.AutomaticCollectionWorker
 
   @default_order_by [asc: :id]
   @default_page_number 1
@@ -37,6 +38,26 @@ defmodule Tailcall.Billing.Invoices do
     %{total: count, data: invoices}
   end
 
+  @spec get_invoice!(binary, keyword) :: Subscription.t() | nil
+  def get_invoice!(id, opts \\ []) when is_binary(id) do
+    filters = opts |> Keyword.get(:filters, []) |> Keyword.put(:id, id)
+
+    opts
+    |> Keyword.put(:filters, filters)
+    |> invoice_queryable()
+    |> Repo.one!()
+  end
+
+  @spec get_invoice(binary, keyword) :: Subscription.t() | nil
+  def get_invoice(id, opts \\ []) when is_binary(id) do
+    filters = opts |> Keyword.get(:filters, []) |> Keyword.put(:id, id)
+
+    opts
+    |> Keyword.put(:filters, filters)
+    |> invoice_queryable()
+    |> Repo.one()
+  end
+
   @spec create_invoice(map()) :: {:ok, Invoice.t()} | {:error, Ecto.Changeset.t()}
   def create_invoice(attrs) when is_map(attrs) do
     status = Map.get(attrs, :status, Invoice.statuses().draft)
@@ -53,10 +74,18 @@ defmodule Tailcall.Billing.Invoices do
       })
 
     Multi.new()
-    |> Multi.insert(:invoice, Invoice.create_changeset(%Invoice{}, attrs))
-    |> Oban.insert(:renew_subscription_job, fn %{invoice: invoice} ->
-      %{id: invoice.id}
-      |> AutoAdvanceWorker.new(scheduled_at: DateTime.add(invoice.created_at, 3600, :second))
+    |> Multi.insert(
+      :invoice,
+      Invoice.create_changeset(%Invoice{}, attrs) |> validate_create_changes()
+    )
+    |> Multi.run(:auto_advance, fn
+      _repo, %{invoice: %{id: id, auto_advance: true, created_at: created_at}} ->
+        %{id: id}
+        |> AutomaticCollectionWorker.new(scheduled_at: DateTime.add(created_at, 3600, :second))
+        |> Oban.insert()
+
+      _repo, %{invoice: %{auto_advance: false}} ->
+        {:ok, nil}
     end)
     |> Repo.transaction()
     |> case do
@@ -65,6 +94,14 @@ defmodule Tailcall.Billing.Invoices do
     end
   end
 
+  def finalize_invoice(%Invoice{status: "draft"} = invoice) do
+    invoice
+    |> Ecto.Changeset.change(%{status: Invoice.statuses().open})
+    |> Repo.update()
+  end
+
+  def finalize_invoice(%Invoice{}), do: {:error, :invalid_action}
+
   @spec invoice_queryable(keyword) :: Ecto.Queryable.t()
   def invoice_queryable(opts \\ []) do
     filters = Keyword.get(opts, :filters, [])
@@ -75,6 +112,56 @@ defmodule Tailcall.Billing.Invoices do
     |> InvoiceQueryable.with_preloads(includes)
   end
 
+  defp validate_create_changes(%Ecto.Changeset{valid?: false} = changeset), do: changeset
+
+  defp validate_create_changes(changeset) do
+    changeset
+    |> Ecto.Changeset.prepare_changes(fn changeset ->
+      changeset
+      |> assoc_constraint_account()
+      |> assoc_constraint_customer()
+      |> assoc_constraint_subscription()
+    end)
+  end
+
+  defp assoc_constraint_account(%Ecto.Changeset{valid?: false} = changeset), do: changeset
+
+  defp assoc_constraint_account(%Ecto.Changeset{valid?: true} = changeset) do
+    account_id = Ecto.Changeset.get_field(changeset, :account_id)
+
+    if Accounts.account_exists?(account_id) do
+      changeset
+    else
+      changeset |> Ecto.Changeset.add_error(:account, "does not exist")
+    end
+  end
+
+  defp assoc_constraint_customer(%Ecto.Changeset{valid?: false} = changeset), do: changeset
+
+  defp assoc_constraint_customer(%Ecto.Changeset{valid?: true} = changeset) do
+    account_id = Ecto.Changeset.get_field(changeset, :account_id)
+    customer_id = Ecto.Changeset.get_field(changeset, :customer_id)
+
+    if Customers.customer_exists?(customer_id, filters: [account_id: account_id]) do
+      changeset
+    else
+      changeset |> Ecto.Changeset.add_error(:customer, "does not exist")
+    end
+  end
+
+  defp assoc_constraint_subscription(%Ecto.Changeset{valid?: false} = changeset), do: changeset
+
+  defp assoc_constraint_subscription(%Ecto.Changeset{valid?: true} = changeset) do
+    account_id = Ecto.Changeset.get_field(changeset, :account_id)
+    subscription_id = Ecto.Changeset.get_field(changeset, :subscription_id)
+
+    if Subscriptions.subscription_exists?(subscription_id, filters: [account_id: account_id]) do
+      changeset
+    else
+      changeset |> Ecto.Changeset.add_error(:subscription, "does not exist")
+    end
+  end
+
   defp list_order_by_fields(opts) do
     Keyword.get(opts, :order_by_fields, [])
     |> case do
diff --git a/lib/tailcall/billing/invoices/invoice.ex b/lib/tailcall/billing/invoices/invoice.ex
index 677670e..f25ef5d 100644
--- a/lib/tailcall/billing/invoices/invoice.ex
+++ b/lib/tailcall/billing/invoices/invoice.ex
@@ -39,7 +39,6 @@ defmodule Tailcall.Billing.Invoices.Invoice do
           updated_at: DateTime.t()
         }
 
-  # @payment_behaviors ["allow_incomplete", "error_if_incomplete", "pending_if_incomplete"]
   # @proration_behaviors ["create_prorations", "none"]
 
   @primary_key {:id, Shortcode.Ecto.ID, prefix: "in", autogenerate: true}
diff --git a/lib/tailcall/billing/subscriptions.ex b/lib/tailcall/billing/subscriptions.ex
index c2b1724..8a23e92 100644
--- a/lib/tailcall/billing/subscriptions.ex
+++ b/lib/tailcall/billing/subscriptions.ex
@@ -62,6 +62,15 @@ defmodule Tailcall.Billing.Subscriptions do
     |> Repo.one()
   end
 
+  @spec subscription_exists?(binary) :: boolean
+  def subscription_exists?(id, opts \\ []) when is_binary(id) do
+    filters = opts |> Keyword.get(:filters, []) |> Keyword.put(:id, id)
+
+    [filters: filters]
+    |> subscription_queryable()
+    |> Repo.exists?()
+  end
+
   @spec create_subscription(map()) :: {:ok, Subscription.t()} | {:error, Ecto.Changeset.t()}
   def create_subscription(attrs) when is_map(attrs) do
     utc_now = DateTime.utc_now()
diff --git a/test/support/factories/accounts/account_factory.ex b/test/support/factories/accounts/account_factory.ex
index 45ad85e..15e47ec 100644
--- a/test/support/factories/accounts/account_factory.ex
+++ b/test/support/factories/accounts/account_factory.ex
@@ -4,19 +4,20 @@ defmodule Tailcall.Factory.Accounts.Account do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:account) do
+      def build(:account, attrs) do
         %Account{
           api_version: "api_version",
           created_at: utc_now(),
           invoice_settings: build(:invoice_settings),
           name: "name_#{System.unique_integer([:positive])}"
         }
+        |> struct!(attrs)
       end
 
       def make_deleted(%Account{} = account), do: %{account | deleted_at: utc_now()}
 
-      def build(:invoice_settings) do
-        %InvoiceSettings{}
+      def build(:invoice_settings, attrs) do
+        %InvoiceSettings{} |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/accounts/api_key_factory.ex b/test/support/factories/accounts/api_key_factory.ex
index 9def20c..4d28141 100644
--- a/test/support/factories/accounts/api_key_factory.ex
+++ b/test/support/factories/accounts/api_key_factory.ex
@@ -3,8 +3,9 @@ defmodule Tailcall.Factory.Accounts.ApiKey do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:api_key) do
-        %{id: account_id} = insert!(:account)
+      def build(:api_key, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
 
         %ApiKey{
           account_id: account_id,
@@ -14,18 +15,20 @@ defmodule Tailcall.Factory.Accounts.ApiKey do
         }
         |> type_secret()
         |> type_publishable()
+        |> struct!(attrs)
       end
 
       def type_secret(%ApiKey{} = api_key), do: %{api_key | type: "secret"}
       def type_publishable(%ApiKey{} = api_key), do: %{api_key | type: "publishable"}
       def make_expired(%ApiKey{} = api_key), do: %{api_key | expired_at: utc_now()}
 
-      def build(:api_key_usage) do
+      def build(:api_key_usage, attrs) do
         %ApiKeyUsage{
           ip_address: "127.0.0.1",
           request_id: "request_id",
           used_at: DateTime.utc_now() |> DateTime.truncate(:microsecond)
         }
+        |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/audit/event_factory.ex b/test/support/factories/audit/event_factory.ex
index 0c11875..2859834 100644
--- a/test/support/factories/audit/event_factory.ex
+++ b/test/support/factories/audit/event_factory.ex
@@ -3,7 +3,7 @@ defmodule Tailcall.Factory.Audit.Event do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:event) do
+      def build(:event, attrs) do
         %Event{
           account_id: shortcode_id("acct"),
           api_version: "api_version",
@@ -15,6 +15,7 @@ defmodule Tailcall.Factory.Audit.Event do
           resource_id: "resource_id_#{System.unique_integer([:positive])}",
           resource_type: "resource_type_#{System.unique_integer([:positive])}"
         }
+        |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/billing/invoice_factory.ex b/test/support/factories/billing/invoice_factory.ex
index 4fc38f8..a09a87d 100644
--- a/test/support/factories/billing/invoice_factory.ex
+++ b/test/support/factories/billing/invoice_factory.ex
@@ -1,19 +1,45 @@
 defmodule Tailcall.Factory.Billing.Invoice do
   alias Tailcall.Billing.Prices.Price
+  alias Tailcall.Billing.Subscriptions.Subscription
   alias Tailcall.Billing.Invoices.{Invoice, InvoiceLineItem}
 
   defmacro __using__(_opts) do
     quote do
-      def build(:invoice) do
-        account = insert!(:account)
-        customer = insert!(:customer, account_id: account.id)
-        subscription = insert!(:subscription, account_id: account.id)
+      def build(:invoice, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
+
+        {customer_id, attrs} = Keyword.pop(attrs, :customer_id)
+        customer_id = customer_id || Map.get(insert!(:customer, account_id: account_id), :id)
+
+        {subscription_id, attrs} = Keyword.pop(attrs, :subscription_id)
+
+        subscription =
+          if subscription_id do
+            Subscription |> Tailcall.Repo.get(subscription_id)
+          else
+            insert!(:subscription, account_id: account_id, customer_id: customer_id)
+          end
+
+        invoice_line_items =
+          subscription
+          |> Tailcall.Repo.preload(:items)
+          |> Map.get(:items)
+          |> Enum.map(
+            &build(:invoice_line_item,
+              price_id: &1.price_id,
+              subscription_id: subscription.id,
+              subscription_item_id: &1.id,
+              quantity: &1.quantity,
+              type: InvoiceLineItem.types().subscription
+            )
+          )
 
         utc_now = utc_now()
 
         %Invoice{
-          account_id: account.id,
-          customer_id: customer.id,
+          account_id: account_id,
+          customer_id: customer_id,
           subscription_id: subscription.id,
           amount_due: 0,
           amount_paid: 0,
@@ -21,17 +47,19 @@ defmodule Tailcall.Factory.Billing.Invoice do
           billing_reason: Invoice.billing_reasons().subscription_cycle,
           created_at: utc_now,
           currency: Price.currencies().ils,
+          line_items: invoice_line_items,
           livemode: false,
           period_end: utc_now,
           period_start: utc_now,
           status: Invoice.statuses().open,
           total: 0
         }
+        |> struct!(attrs)
       end
 
       def make_deleted(%Invoice{} = invoice), do: %{invoice | deleted_at: utc_now()}
 
-      def build(:invoice_line_item) do
+      def build(:invoice_line_item, attrs) do
         utc_now = utc_now()
 
         %InvoiceLineItem{
@@ -43,6 +71,7 @@ defmodule Tailcall.Factory.Billing.Invoice do
           period_start: utc_now,
           type: InvoiceLineItem.types().subscription
         }
+        |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/billing/price_factory.ex b/test/support/factories/billing/price_factory.ex
index 3a70674..d9450e3 100644
--- a/test/support/factories/billing/price_factory.ex
+++ b/test/support/factories/billing/price_factory.ex
@@ -4,13 +4,16 @@ defmodule Tailcall.Factory.Billing.Price do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:price) do
-        account = insert!(:account)
-        product = insert!(:product, account_id: account.id)
+      def build(:price, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
+
+        {product_id, attrs} = Keyword.pop(attrs, :product_id)
+        product_id = product_id || Map.get(insert!(:product, account_id: account_id), :id)
 
         %Price{
-          account_id: account.id,
-          product_id: product.id,
+          account_id: account_id,
+          product_id: product_id,
           created_at: utc_now(),
           currency: Price.currencies().ils,
           livemode: false,
@@ -18,6 +21,7 @@ defmodule Tailcall.Factory.Billing.Price do
         }
         |> make_active()
         |> make_type_recurring()
+        |> struct!(attrs)
       end
 
       def make_active(%Price{} = price), do: %{price | active: true}
@@ -113,8 +117,8 @@ defmodule Tailcall.Factory.Billing.Price do
         })
       end
 
-      def build(:price_tier) do
-        %PriceTier{}
+      def build(:price_tier, attrs) do
+        %PriceTier{} |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/billing/product_factory.ex b/test/support/factories/billing/product_factory.ex
index 16495c2..8dceb32 100644
--- a/test/support/factories/billing/product_factory.ex
+++ b/test/support/factories/billing/product_factory.ex
@@ -3,11 +3,12 @@ defmodule Tailcall.Factory.Billing.Product do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:product) do
-        account = insert!(:account)
+      def build(:product, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
 
         %Product{
-          account_id: account.id,
+          account_id: account_id,
           description: "description_#{System.unique_integer()}",
           caption: "caption_#{System.unique_integer()}",
           created_at: utc_now(),
@@ -20,6 +21,7 @@ defmodule Tailcall.Factory.Billing.Product do
           url: "url_#{System.unique_integer()}"
         }
         |> make_active()
+        |> struct!(attrs)
       end
 
       def make_active(%Product{} = product), do: %{product | active: true}
diff --git a/test/support/factories/billing/subscription_factory.ex b/test/support/factories/billing/subscription_factory.ex
index 1a1aa93..f2f1c22 100644
--- a/test/support/factories/billing/subscription_factory.ex
+++ b/test/support/factories/billing/subscription_factory.ex
@@ -3,37 +3,49 @@ defmodule Tailcall.Factory.Billing.Subscription do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:subscription) do
-        account = insert!(:account)
-        customer = insert!(:customer)
+      def build(:subscription, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
+
+        {customer_id, attrs} = Keyword.pop(attrs, :customer_id)
+        customer_id = customer_id || Map.get(insert!(:customer, account_id: account_id), :id)
 
         utc_now = utc_now()
 
         %Subscription{
-          account_id: account.id,
-          customer_id: customer.id,
+          account_id: account_id,
+          customer_id: customer_id,
           created_at: utc_now,
           current_period_end: utc_now,
           current_period_start: utc_now,
-          items: [],
+          items: [build(:subscription_item, account_id: account_id)],
           livemode: false,
           started_at: utc_now,
           status: Subscription.statuses().active
         }
+        |> struct!(attrs)
       end
 
       def make_ended(%Subscription{} = subscription), do: %{subscription | ended_at: utc_now()}
 
-      def build(:subscription_item) do
-        price = insert!(:price)
+      def build(:subscription_item, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+
+        price =
+          build(:price, account_id: account_id)
+          |> make_recurring_usage_type_licensed()
+          |> make_billing_scheme_per_unit()
+          |> insert!()
 
         utc_now = utc_now()
 
         %SubscriptionItem{
           created_at: utc_now,
           price_id: price.id,
+          quantity: 1,
           started_at: utc_now
         }
+        |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/billing/tax_rate_factory.ex b/test/support/factories/billing/tax_rate_factory.ex
index 4c24ea2..0138f1e 100644
--- a/test/support/factories/billing/tax_rate_factory.ex
+++ b/test/support/factories/billing/tax_rate_factory.ex
@@ -3,11 +3,12 @@ defmodule Tailcall.Factory.Billing.TaxRate do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:tax_rate) do
-        account = insert!(:account)
+      def build(:tax_rate, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
 
         %TaxRate{
-          account_id: account.id,
+          account_id: account_id,
           created_at: utc_now(),
           description: "description_#{System.unique_integer()}",
           display_name: "display_name_#{System.unique_integer()}",
@@ -18,6 +19,7 @@ defmodule Tailcall.Factory.Billing.TaxRate do
         }
         |> make_active()
         |> make_inclusive()
+        |> struct!(attrs)
       end
 
       def make_active(%TaxRate{} = tax_rate), do: %{tax_rate | active: true}
diff --git a/test/support/factories/core/customer_factory.ex b/test/support/factories/core/customer_factory.ex
index 85a6b88..b59acf8 100644
--- a/test/support/factories/core/customer_factory.ex
+++ b/test/support/factories/core/customer_factory.ex
@@ -5,11 +5,12 @@ defmodule Tailcall.Factory.Core.Customers.Customer do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:customer) do
-        account = insert!(:account)
+      def build(:customer, attrs) do
+        {account_id, attrs} = Keyword.pop(attrs, :account_id)
+        account_id = account_id || Map.get(insert!(:account), :id)
 
         %Customer{
-          account_id: account.id,
+          account_id: account_id,
           currency: "ils",
           created_at: utc_now(),
           description: "description_#{System.unique_integer()}",
@@ -22,22 +23,25 @@ defmodule Tailcall.Factory.Core.Customers.Customer do
           phone: "phone_#{System.unique_integer()}",
           preferred_locales: ["he"]
         }
+        |> struct!(attrs)
       end
 
       def make_deleted(%Customer{} = customer), do: %{customer | deleted_at: utc_now()}
 
-      def build(:customer_invoice_settings) do
+      def build(:customer_invoice_settings, attrs) do
         %InvoiceSettings{
           custom_fields: [build(:customer_invoice_settings_custom_field) |> Map.from_struct()],
           footer: "footer_#{System.unique_integer()}"
         }
+        |> struct!(attrs)
       end
 
-      def build(:customer_invoice_settings_custom_field) do
+      def build(:customer_invoice_settings_custom_field, attrs) do
         %CustomField{
           name: "name_#{System.unique_integer()}",
           value: "value_#{System.unique_integer()}"
         }
+        |> struct!(attrs)
       end
     end
   end
diff --git a/test/support/factories/users/user_factory.ex b/test/support/factories/users/user_factory.ex
index a4b50a2..b250dbc 100644
--- a/test/support/factories/users/user_factory.ex
+++ b/test/support/factories/users/user_factory.ex
@@ -3,7 +3,7 @@ defmodule Tailcall.Factory.Users.User do
 
   defmacro __using__(_opts) do
     quote do
-      def build(:user) do
+      def build(:user, attrs) do
         {:ok, performer} = Annacl.create_performer()
 
         %User{
@@ -12,6 +12,7 @@ defmodule Tailcall.Factory.Users.User do
           name: "name_#{System.unique_integer([:positive])}",
           performer_id: performer.id
         }
+        |> struct!(attrs)
       end
 
       def make_deleted(%User{} = user), do: %{user | deleted_at: utc_now()}
diff --git a/test/support/factory.ex b/test/support/factory.ex
index 2da2e6e..2c6b43b 100644
--- a/test/support/factory.ex
+++ b/test/support/factory.ex
@@ -53,9 +53,7 @@ defmodule Tailcall.Factory do
   end
 
   @spec build(atom, Enum.t()) :: %{:__struct__ => atom, optional(atom) => any}
-  def build(factory_name, attributes) do
-    factory_name |> build() |> struct!(attributes)
-  end
+  def build(factory_name), do: build(factory_name, [])
 
   @spec insert!(atom, Enum.t()) :: any
   def insert!(factory_name, attributes)
@@ -68,7 +66,5 @@ defmodule Tailcall.Factory do
     factory_name |> build([]) |> insert!()
   end
 
-  def insert!(schema) when is_struct(schema) do
-    schema |> Repo.insert!()
-  end
+  def insert!(schema) when is_struct(schema), do: schema |> Repo.insert!()
 end
diff --git a/test/tailcall/accounts/api_keys_test.exs b/test/tailcall/accounts/api_keys_test.exs
index 2406f60..030e8de 100644
--- a/test/tailcall/accounts/api_keys_test.exs
+++ b/test/tailcall/accounts/api_keys_test.exs
@@ -78,7 +78,7 @@ defmodule Tailcall.Accounts.ApiKeysTest do
     end
 
     test "when data is invalid, returns an error tuple with an invalid changeset" do
-      api_key_params = params_for(:api_key, account_id: nil)
+      api_key_params = params_for(:api_key, livemode: nil)
 
       assert {:error, changeset} = ApiKeys.create_api_key(api_key_params)
 
diff --git a/test/tailcall/accounts_test.exs b/test/tailcall/accounts_test.exs
index 97f3151..b609c09 100644
--- a/test/tailcall/accounts_test.exs
+++ b/test/tailcall/accounts_test.exs
@@ -32,8 +32,7 @@ defmodule Tailcall.Accounts.AccountsTest do
     end
 
     test "with an expired existing key returns :forbidden" do
-      api_key_params = build(:api_key) |> make_expired() |> params_for()
-      api_key = insert!(:api_key, api_key_params)
+      api_key = build(:api_key) |> make_expired() |> insert!()
 
       assert {:error, :forbidden} = Accounts.authenticate(%{"api_key" => api_key.secret})
     end
diff --git a/test/tailcall/billing/invoices_test.exs b/test/tailcall/billing/invoices_test.exs
index d810c15..cd521cc 100644
--- a/test/tailcall/billing/invoices_test.exs
+++ b/test/tailcall/billing/invoices_test.exs
@@ -6,6 +6,7 @@ defmodule Tailcall.Billing.InvoincesTest do
 
   alias Tailcall.Billing.Invoices
   alias Tailcall.Billing.Invoices.Invoice
+  alias Tailcall.Billing.Invoices.Workers.AutomaticCollectionWorker
 
   @moduletag :invoices
 
@@ -56,29 +57,7 @@ defmodule Tailcall.Billing.InvoincesTest do
     end
 
     test "includes" do
-      account = insert!(:account)
-      price = build(:price, account_id: account.id) |> insert!()
-      customer = insert!(:customer, account_id: account.id)
-
-      %{items: [subscription_item]} =
-        subscription =
-        insert!(:subscription,
-          account_id: account.id,
-          customer_id: customer.id,
-          items: [build(:subscription_item, price_id: price.id, quantity: 1)]
-        )
-
-      insert!(:invoice,
-        account_id: account.id,
-        customer_id: customer.id,
-        line_items: [
-          build(:invoice_line_item,
-            price_id: price.id,
-            subscription_id: subscription.id,
-            subscription_item_id: subscription_item.id
-          )
-        ]
-      )
+      insert!(:invoice)
 
       %{data: [invoice], total: 1} = Invoices.list_invoices()
 
@@ -93,13 +72,49 @@ defmodule Tailcall.Billing.InvoincesTest do
     end
   end
 
+  describe "get_invoice/2" do
+    test "returns the invoice" do
+      %{id: id} = insert!(:invoice)
+      assert %{id: ^id} = Invoices.get_invoice(id)
+    end
+
+    test "when the invoice does not exist, returns nil" do
+      assert is_nil(Invoices.get_invoice(shortcode_id()))
+    end
+
+    test "includes" do
+      invoice_factory = insert!(:invoice)
+
+      invoice = Invoices.get_invoice(invoice_factory.id)
+      assert Ecto.assoc_loaded?(invoice.line_items)
+      refute Ecto.assoc_loaded?(invoice.subscription)
+
+      invoice = Invoices.get_invoice(invoice_factory.id, includes: [:subscription])
+
+      assert Ecto.assoc_loaded?(invoice.line_items)
+      assert Ecto.assoc_loaded?(invoice.subscription)
+    end
+  end
+
+  describe "get_invoice!/2" do
+    test "returns the invoice" do
+      %{id: id} = insert!(:invoice)
+      assert %{id: ^id} = Invoices.get_invoice!(id)
+    end
+
+    test "when the invoice does not exist, raises a Ecto.NoResultsError" do
+      assert_raise Ecto.NoResultsError, fn ->
+        Invoices.get_invoice!(shortcode_id())
+      end
+    end
+  end
+
   describe "create_invoices/1" do
     test "when params are valid, creates a invoice" do
       account = insert!(:account)
-      product = insert!(:product, account_id: account.id)
 
       price =
-        build(:price, account_id: account.id, product_id: product.id)
+        build(:price, account_id: account.id)
         |> make_type_recurring(%{
           recurring_interval: Price.recurring_intervals().day,
           recurring_interval_count: 1
@@ -169,50 +184,47 @@ defmodule Tailcall.Billing.InvoincesTest do
       assert invoice_line_item.period_start == subscription.current_period_start
       assert invoice_line_item.quantity == subscription_item.quantity
       assert invoice_line_item.type == Invoices.InvoiceLineItem.types().subscription
+    end
+
+    test "when the create_invoice failed, does not enqueue a job" do
+      assert {:error, _changeset} = Invoices.create_invoice(%{})
+      refute_enqueued(worker: AutomaticCollectionWorker)
+    end
+
+    test "when creating an auto_advance invoice, enqueue a job" do
+      invoice_params = params_for(:invoice, auto_advance: true)
+      assert {:ok, invoice} = Invoices.create_invoice(invoice_params)
 
       assert_enqueued(
-        worker: Tailcall.Billing.Invoices.Workers.AutomaticCollectionWorker,
+        worker: AutomaticCollectionWorker,
         args: %{id: invoice.id},
         scheduled_at: DateTime.add(invoice.created_at, 3600, :second)
       )
     end
 
-    test "when the create_subscription failed, does not enqueue a job" do
-      assert {:error, _changeset} = Subscriptions.create_subscription(%{})
-      refute_enqueued(worker: Tailcall.Billing.Subscriptions.Workers.RenewSubscriptionWorker)
+    test "when creating an invoice without auto_advance, does not enqueue a job" do
+      invoice_params = params_for(:invoice, auto_advance: false)
+      assert {:ok, _invoice} = Invoices.create_invoice(invoice_params)
+      refute_enqueued(worker: AutomaticCollectionWorker)
     end
 
     test "when account does not exist, returns an error tuple with an invalid changeset" do
-      customer = insert!(:customer)
       account_id = shortcode_id("acct")
-      price = insert!(:price, account_id: account_id)
 
-      subscription_params =
-        params_for(:subscription,
-          account_id: account_id,
-          customer_id: customer.id,
-          items: [build(:subscription_item, price_id: price.id)]
-        )
+      invoice_params = params_for(:invoice, account_id: account_id)
 
-      assert {:error, changeset} = Subscriptions.create_subscription(subscription_params)
+      assert {:error, changeset} = Invoices.create_invoice(invoice_params)
 
       refute changeset.valid?
       assert %{account: ["does not exist"]} = errors_on(changeset)
     end
 
     test "when customer does not exist, returns an error tuple with an invalid changeset" do
-      account = insert!(:account)
+      customer_id = shortcode_id("cus")
 
-      price = insert!(:price, account_id: account.id)
+      invoice_params = params_for(:invoice, customer_id: customer_id)
 
-      subscription_params =
-        params_for(:subscription,
-          account_id: account.id,
-          customer_id: shortcode_id(),
-          items: [build(:subscription_item, price_id: price.id)]
-        )
-
-      assert {:error, changeset} = Subscriptions.create_subscription(subscription_params)
+      assert {:error, changeset} = Invoices.create_invoice(invoice_params)
 
       refute changeset.valid?
       assert %{customer: ["does not exist"]} = errors_on(changeset)
@@ -222,39 +234,68 @@ defmodule Tailcall.Billing.InvoincesTest do
       account = insert!(:account)
       customer = insert!(:customer)
 
-      price = insert!(:price, account_id: account.id)
-
-      subscription_params =
-        params_for(:subscription,
-          account_id: account.id,
-          customer_id: customer.id,
-          items: [build(:subscription_item, price_id: price.id)]
-        )
+      invoice_params = params_for(:invoice, account_id: account.id, customer_id: customer.id)
 
-      assert {:error, changeset} = Subscriptions.create_subscription(subscription_params)
+      assert {:error, changeset} = Invoices.create_invoice(invoice_params)
 
       refute changeset.valid?
       assert %{customer: ["does not exist"]} = errors_on(changeset)
     end
 
-    test "when price does not belong to the subscription account, returns an invalid changeset" do
-      account = insert!(:account)
-      customer = insert!(:customer, account_id: account.id)
+    test "when the subscription does not exist, returns an error tuple with an invalid changeset" do
+      subscription_id = shortcode_id("sub")
 
-      price = insert!(:price)
+      invoice_params = params_for(:invoice) |> Map.put(:subscription_id, subscription_id)
 
-      subscription_params =
-        params_for(:subscription,
-          account_id: account.id,
-          customer_id: customer.id,
-          items: [build(:subscription_item, price_id: price.id)]
-        )
+      assert {:error, changeset} = Invoices.create_invoice(invoice_params)
 
-      assert {:error, changeset} = Subscriptions.create_subscription(subscription_params)
+      refute changeset.valid?
+      assert %{subscription: ["does not exist"]} = errors_on(changeset)
+    end
+
+    test "when subscription does not belong to the account, returns an invalid changeset" do
+      account = insert!(:account)
+      subscription = insert!(:subscription)
+
+      invoice_params =
+        params_for(:invoice, account_id: account.id, subscription_id: subscription.id)
+
+      assert {:error, changeset} = Invoices.create_invoice(invoice_params)
 
       refute changeset.valid?
+      assert %{subscription: ["does not exist"]} = errors_on(changeset)
+    end
+  end
+
+  describe "finalize_invoice/1" do
+    test "when status is draft, advances the invoice to open" do
+      invoice = insert!(:invoice, status: Invoice.statuses().draft)
+      open_status = Invoice.statuses().open
+
+      assert {:ok, %Invoice{status: ^open_status}} = Invoices.finalize_invoice(invoice)
+    end
+
+    test "AutomaticCollectionWorker worker when status is draft, collects the invoice" do
+      invoice = insert!(:invoice, status: Invoice.statuses().draft)
+      open_status = Invoice.statuses().open
+
+      assert {:ok, _} = perform_job(AutomaticCollectionWorker, %{"id" => invoice.id})
+
+      assert %Invoice{status: ^open_status} = Invoices.get_invoice!(invoice.id)
+    end
+
+    test "when status is not draft, returns an error tuple" do
+      invoice = insert!(:invoice, status: Invoice.statuses().open)
+      assert {:error, :invalid_action} = Invoices.finalize_invoice(invoice)
+    end
+
+    test "AutomaticCollectionWorker worker when status is not draft, collects the invoice" do
+      open_status = Invoice.statuses().open
+      invoice = insert!(:invoice, status: open_status)
+
+      assert {:ok, _} = perform_job(AutomaticCollectionWorker, %{"id" => invoice.id})
 
-      assert %{items: ["prices must belongs to account #{account.id}"]} == errors_on(changeset)
+      assert %Invoice{status: ^open_status} = Invoices.get_invoice!(invoice.id)
     end
   end
 end
diff --git a/test/tailcall/billing/subscriptions_test.exs b/test/tailcall/billing/subscriptions_test.exs
index c28c211..ad2254c 100644
--- a/test/tailcall/billing/subscriptions_test.exs
+++ b/test/tailcall/billing/subscriptions_test.exs
@@ -440,31 +440,16 @@ defmodule Tailcall.Billing.SubscriptionsTest do
     end
 
     test "RenewSubscriptionWorker renew the subscription" do
-      account = insert!(:account)
-
-      price =
-        build(:price, account_id: account.id)
-        |> make_recurring_usage_type_licensed()
-        |> make_billing_scheme_per_unit()
-        |> insert!()
-
-      customer = insert!(:customer, account_id: account.id)
-
-      subscription_factory =
-        insert!(:subscription,
-          account_id: account.id,
-          customer_id: customer.id,
-          items: [build(:subscription_item, price_id: price.id, quantity: 1)],
-          status: Subscription.statuses().active
-        )
+      subscription = insert!(:subscription, status: Subscription.statuses().active)
 
-      assert {:ok, _} = perform_job(RenewSubscriptionWorker, %{"id" => subscription_factory.id})
+      assert {:ok, _} = perform_job(RenewSubscriptionWorker, %{"id" => subscription.id})
 
-      subscription =
-        Subscriptions.get_subscription!(subscription_factory.id, includes: [:latest_invoice])
+      subscription_cycle_status = Invoice.billing_reasons().subscription_cycle
 
-      assert subscription.latest_invoice.billing_reason ==
-               Invoice.billing_reasons().subscription_cycle
+      assert %{latest_invoice: %{billing_reason: ^subscription_cycle_status}} =
+               Subscriptions.get_subscription!(subscription.id,
+                 includes: [:latest_invoice]
+               )
     end
   end
 
